# OSARA: Open Source Accessibility for the REAPER Application
# SConstruct
# Copyright 2015-2025 NV Access Limited, James Teh
# License: GNU General Public License version 2.0

import os
from makePot import makePot
import multiprocessing

vars = Variables()
vars.Add("version", "The version of this build", "unknown")
vars.Add("publisher", "The publisher of this build", "unknown")
vars.Add("mac_signing_mode", "Mac signing mode: 'ad-hoc' (default) or 'none'", "ad-hoc")
env = DefaultEnvironment(tools=[],
	variables=vars,
	copyright="Copyright (C) 2014-2025 NV Access Limited, James Teh & other contributors",
)

# Make sure to run the build on multiple threads so it runs faster
env.SetOption('num_jobs', multiprocessing.cpu_count())
print("Building using {} jobs".format(env.GetOption('num_jobs')))

if env["PLATFORM"] == "win32":
	for arch, suffix in (("x86", "32"), ("x86_64", "64")):
		archEnv = Environment(tools=["msvc", "mslink", "textfile"],
			TARGET_ARCH=arch, HOST_ARCH=arch, libSuffix=suffix,
			version=env["version"], copyright=env["copyright"],
			# Hack around an odd bug where some tool after msvc states that static and shared objects are different.
			STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME=1)
		archEnv.SConscript("src/archBuild_sconscript",
			exports={"env": archEnv},
			variant_dir="build/%s" % arch, duplicate=False)
	configRc = "build/x86_64/config.rc"

	import winreg
	def getMakensis():
		"""Get the path to makensis."""
		try:
			with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\NSIS\Unicode",
					0, winreg.KEY_READ | winreg.KEY_WOW64_32KEY) as nsisKey:
				return os.path.join(winreg.QueryValueEx(nsisKey, None)[0], "makensis.exe")
		except WindowsError:
			pass
		try:
			with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\NSIS",
					0, winreg.KEY_READ | winreg.KEY_WOW64_32KEY) as nsisKey:
				return os.path.join(winreg.QueryValueEx(nsisKey, None)[0], "makensis.exe")
		except WindowsError:
			pass
		return "makensis.exe"
	installer = env.Command("installer/osara_${version}.exe", ["installer/osara.nsi", "build"],
		[[getMakensis(), "/V2",
		"/DVERSION=$version", '/DPUBLISHER="$publisher"','/DCOPYRIGHT="$copyright"',
		"/DOUTFILE=${TARGET.abspath}",
		"$SOURCE"]])

else: # Mac
	# Build main plugin
	archEnv = Environment(tools=["clangxx", "applelink", "textfile"],
		libSuffix="", version=env["version"], copyright=env["copyright"])
	archEnv.SConscript("src/archBuild_sconscript",
		exports={"env": archEnv},
		variant_dir="build", duplicate=False)

	# Build Mac installer
	installerEnv = archEnv.Clone()
	installerEnv["mac_signing_mode"] = env["mac_signing_mode"]
	installer = installerEnv.SConscript("installer/mac/SConscript", 
		exports={"env": installerEnv}, 
		variant_dir="build/installer", 
		duplicate=False)

	configRc = "build/config.rc"

pot = env.Command("locale/osara_${version}.pot",
	[env.Glob("src/*.cpp"), env.Glob("src/*.rc"), configRc, 
	 env.Glob("installer/OSARAInstaller/*.cpp"), env.Glob("installer/OSARAInstaller/*.mm"), 
	 "installer/OSARAInstaller/installer.rc"],
	makePot)
env.Alias("pot", pot)
