# OSARA: Open Source Accessibility for the REAPER Application
# SConscript for architecture-specific building of the source
# Copyright 2015-2023 NV Access Limited, James Teh
# License: GNU General Public License version 2.0

import os.path
from makeConfigRc import makeConfigRc

Import("env")

env.Textfile(target="buildVersion.h", source=[
	'const char OSARA_VERSION[] = "$version";',
	'const char OSARA_COPYRIGHT[] = "$copyright";',
]);

configRc = env.Command("config.rc",
	["resource.h", "settings.h"],
	makeConfigRc)

env.Append(CPPPATH=(
	".",
	"#include",
	"#include/WDL",
	"#include/tinygettext/include",
	"#include/fmt/include"
))
sources = [
	"reaper_osara.cpp",
	"config.cpp",
	"paramsUi.cpp",
	"peakWatcher.cpp",
	"midiEditorCommands.cpp",
	"envelopeCommands.cpp",
	"controlSurface.cpp",
	"exports.cpp",
	"fxChain.cpp",
	"translation.cpp",
	"updateCheck.cpp",
]

if env["PLATFORM"] == "win32":
	# On Windows, OSARA is build with LLVM to have a toolchain that's closer to what's used on Mac
	env["CC"] = "clang-cl"
	env["LINK"] = "lld-link"
	env.Append(CCFLAGS=[
		"/W3",
		"/WX",
		# Clang warns about unused functions in WDL
		"/clang:-Wno-unused-function",
	])
	env.Append(CXXFLAGS=[
		"/clang:-std=c++20",
		"/EHsc",
		# Ignore suggestions to add braces around initialization of subobjects. We might want to fix this at some point
		"/clang:-Wno-missing-braces",
	])
	env.Append(CFLAGS=[
		# Ignore warnings in WDL/win32_utf8.c, not our code
		"/clang:-Wno-deprecated-declarations",
		"/clang:-Wno-unused-variable"
	])
	# We always want debug symbols.
	env.Append(PDB="${TARGET}.pdb")
	# having symbols usually turns this off, but we have no need for unused symbols.
	env.Append(LINKFLAGS='/OPT:REF')
	sources.extend((
		"uia.cpp",
		env.Object("win32_utf8.obj", "#include/WDL/WDL/win32_utf8.c"),
		env.RES("reaper_osara.rc"),
		env.RES("config.rc"),
	))
	libs = [
		"user32",
		"ole32",
		"oleacc",
		"OleAut32",
		"Shell32",
		"Comdlg32",
		"Advapi32",
		"UIAutomationCore",
		"ws2_32",
	]

else: # Mac
	swellDir = env.Dir("#include/WDL/WDL/swell")
	env.Append(CPPPATH=(swellDir,))
	env["CXX"] = "clang++"
	import subprocess
	env["xcodeDevDir"] = (
		subprocess.check_output(("xcode-select", "-p"))
		.decode().strip())
	coreFlags = ("-mmacosx-version-min=10.7 -stdlib=libc++ "
		"-arch x86_64 -arch arm64 "
		"-isysroot $xcodeDevDir/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")
	cxxFlags = coreFlags + " -std=c++20 -Werror"
	env.Append(CXXFLAGS=cxxFlags)
	env.Append(LINKFLAGS=coreFlags)
	env.Append(CPPDEFINES="SWELL_PROVIDED_BY_APP")
	sources.append(swellDir.File("swell-modstub.mm"))
	sources.append("osxa11y.mm")
	libs = []
	# OS X frameworks.
	for f in ("Cocoa", "Carbon", "Appkit"):
		env.Append(LINKFLAGS=("-framework", f))
	# We don't want the "lib" prefix for our dylib.
	env["SHLIBPREFIX"] = ""

	# Generate Mac resources.
	import shutil
	php = shutil.which("php")
	res = env.Command(["reaper_osara.rc_mac_dlg", "reaper_osara.rc_mac_menu"], "reaper_osara.rc",
		[[php, "include/WDL/WDL/swell/swell_resgen.php", "$SOURCE"]])
	dialogRes = env.Command(["config.rc_mac_dlg", "config.rc_mac_menu"],
		"config.rc",
		[[php, "include/WDL/WDL/swell/swell_resgen.php", "$SOURCE"]])
	env.Depends("reaper_osara.cpp", [res, dialogRes])

def addExternalSources(dir, files, **kwargs):
	dir = env.Dir(dir)
	# We want the object to be built in our build dir, so we must
	# use env.SharedObject explicitly.
	sources.extend(
		env.SharedObject(os.path.splitext(f)[0], dir.File(f), **kwargs)
		for f in files)

addExternalSources("#include/tinygettext/src", (
	"dictionary.cpp",
	"language.cpp",
	"log.cpp",
	"plural_forms.cpp",
	"po_parser.cpp",
	"tinygettext.cpp",
))
addExternalSources("#include/fmt/src", ("format.cc", "os.cc"))
addExternalSources(
	"#include/WDL/WDL/jnetlib",
	("httpGet.cpp", "connection.cpp", "asyncdns.cpp", "util.cpp"),
	CCFLAGS="-Wno-deprecated-declarations"
)
addExternalSources(
	"#include/simpleson",
	("json.cpp",),
	CCFLAGS="-Wno-deprecated-declarations"
)

env.SharedLibrary(
	target="reaper_osara%s" % env["libSuffix"],
	source=sources, LIBS=libs,
)
