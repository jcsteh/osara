# OSARA: Open Source Accessibility for the REAPER Application
# SConscript for architecture-specific building of the source
# Author: James Teh <jamie@jantrid.net>
# Copyright 2015-2017 NV Access Limited, James Teh
# License: GNU General Public License version 2.0

import os.path

Import("env")

env.Textfile(target="buildVersion.h", source=[
	'const char OSARA_VERSION[] = "$version";',
	'const char OSARA_COPYRIGHT[] = "$copyright";',
]);

env.Append(CPPPATH=(
	".",
	"#include",
	"#include/WDL",
	"#include/tinygettext/include",
	"#include/fmt/include"
))
sources = [
	"reaper_osara.cpp",
	"paramsUi.cpp",
	"peakWatcher.cpp",
	"midiEditorCommands.cpp",
	"envelopeCommands.cpp",
	"controlSurface.cpp",
	"exports.cpp",
	"fxChain.cpp",
	"translation.cpp",
]

if env["PLATFORM"] == "win32":
	env.Append(CXXFLAGS="/EHsc /std:c++latest /W3 /WX "
		# #479: fmt/format.h includes UTF-8 characters in comments. However, cl
		# treats the file as ANSI unless it has a BOM. This causes a warning (and
		# thus an error) on systems with certain locales. Just disable this warning.
		"/wd4819")
	# We always want debug symbols.
	env.Append(PDB="${TARGET}.pdb")
	# having symbols usually turns this off, but we have no need for unused symbols.
	env.Append(LINKFLAGS='/OPT:REF')
	sources.extend((
		"uia.cpp",
		env.Object("win32_utf8.obj", "#include/WDL/WDL/win32_utf8.c"),
		env.RES("reaper_osara.rc"),
	))
	libs = [
		"user32",
		"ole32",
		"oleacc",
		"OleAut32",
		"Shell32",
		"Comdlg32",
		"Advapi32",
		"UIAutomationCore",
	]

else: # Mac
	swellDir = env.Dir("#include/WDL/WDL/swell")
	env.Append(CPPPATH=(swellDir,))
	env["CXX"] = "clang++"
	import subprocess
	env["xcodeDevDir"] = (
		subprocess.check_output(("xcode-select", "-p"))
		.decode().strip())
	coreFlags = ("-mmacosx-version-min=10.7 -stdlib=libc++ "
		"-arch x86_64 -arch arm64 "
		"-isysroot $xcodeDevDir/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")
	cxxFlags = coreFlags + " -std=c++17 -Werror"
	env.Append(CXXFLAGS=cxxFlags)
	env.Append(LINKFLAGS=coreFlags)
	env.Append(CPPDEFINES="SWELL_PROVIDED_BY_APP")
	sources.append(swellDir.File("swell-modstub.mm"))
	sources.append("osxa11y.mm")
	libs = []
	# OS X frameworks.
	for f in ("Cocoa", "Carbon", "Appkit"):
		env.Append(LINKFLAGS=("-framework", f))
	# We don't want the "lib" prefix for our dylib.
	env["SHLIBPREFIX"] = ""

	# Generate Mac resources.
	res = env.Command(["reaper_osara.rc_mac_dlg", "reaper_osara.rc_mac_menu"], "reaper_osara.rc",
		[["include/WDL/WDL/swell/mac_resgen.php", "$SOURCE"]])
	env.Depends("reaper_osara.cpp", res)

def addExternalSources(dir, files):
	dir = env.Dir(dir)
	# We want the object to be built in our build dir, so we must
	# use env.SharedObject explicitly.
	sources.extend(
		env.SharedObject(os.path.splitext(f)[0], dir.File(f))
		for f in files)

addExternalSources("#include/tinygettext/src", (
	"dictionary.cpp",
	"language.cpp",
	"log.cpp",
	"plural_forms.cpp",
	"po_parser.cpp",
	"tinygettext.cpp",
))
addExternalSources("#include/fmt/src", ("format.cc", "os.cc"))

env.SharedLibrary(
	target="reaper_osara%s" % env["libSuffix"],
	source=sources, LIBS=libs,
)
