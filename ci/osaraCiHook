#!/usr/bin/python3

import sys
import os.path
import json
import datetime
import urllib.request
import markdown

SNAPSHOT_INDEX_DIR = os.path.expanduser("~osara/data/snapshotIndex")
SNAPSHOTS_DIR = os.path.expanduser("~osara/www/main/snapshots")
SNAPSHOT_INDEX_FILE = os.path.join(SNAPSHOTS_DIR, "index.html")
UPDATE_FILE = os.path.join(SNAPSHOTS_DIR, "update.json")
README_URL = "https://github.com/jcsteh/osara/raw/master/readme.md"
README_FILE = os.path.expanduser("~osara/www/main/index.html")

def getData(buildOs):
	fn = os.path.join(SNAPSHOT_INDEX_DIR, buildOs)
	try:
		return json.load(open(fn))
	except IOError:
		return None

def writeSnapshotIndex(winData, macData):
	print("Writing snapshot index")
	with open(SNAPSHOT_INDEX_FILE, "w") as f:
		f.write("<html>\n"
			"<head>\n"
			"<title>OSARA Development Snapshots</title>\n"
			"</head>\n"
			"<body>\n"
			"<h1>OSARA Development Snapshots</h1>\n"
"<p>This page contains the latest snapshots of OSARA in its current state of development for Windows and Mac. OSARA is an open source extension under ongoing development, so we encourage you to check back here every so often to ensure that you're running the latest release (note the date after each build number).</p>\n"
'<p>Be aware that technically, OSARA has not yet had an official release. That said, the extension can safely be considered stable. At this point, OSARA is being used every day in production by people all over the world.</p>\n'
'<p>If you find a bug, please <a href="https://github.com/jcsteh/osara/issues/new">open a new issue on GitHub</a> and describe the problem, preferably with thorough steps to reproduce the issue, what happened and what you expected to happen instead.</p>\n'
'<p>Support requests should be posted on the <a href="https://groups.io/g/rwp">Reapers Without Peepers (RWP) group</a>.</p>\n'
			"<ul>\n")
		if winData:
			winData["osName"] = "Windows"
		if macData:
			macData["osName"] = "Mac"
		for data in winData, macData:
			if not data:
				continue
			f.write(
				'<li><a href="https://ci.appveyor.com/api/buildjobs/{data[jobId]}/artifacts/installer/{data[installer]}">Download OSARA {data[version]} for {data[osName]}</a> ({data[date]})</li>\n'
				.format(data=data))
		if winData.get("pot"):
			f.write(
				'<li><a href="https://ci.appveyor.com/api/buildjobs/{data[jobId]}/artifacts/locale/{data[pot]}">Download gettext template for translators {data[version]}</a></li>\n'
				.format(data=winData))
		if winData.get("commit"):
			f.write(
				'<li><a href="https://github.com/jcsteh/osara/commits/{data[commit]}">Change log</a></li>\n'
				.format(data=winData))

		f.write(
			"</ul>\n"
			"</body>\n"
			"</html>\n")

def getCommits():
	with urllib.request.urlopen(
		f"https://api.github.com/repos/jcsteh/osara/commits?per_page=30"
	) as req:
		commits = json.load(req)
	out = []
	for commit in commits:
		out.append([commit["sha"][:8], commit["commit"]["message"]])
	return out

def writeUpdateData(data):
	out = {"version": data["version"], "commits": getCommits()}
	with open(UPDATE_FILE, "w") as f:
		json.dump(out, f)

def updateReadme():
	print("Downloading readme")
	with urllib.request.urlopen(README_URL) as req:
		bodyMd = req.read().decode('UTF-8')
	bodyHtml = markdown.markdown(bodyMd)
	print("Writing readme")
	with open(README_FILE, "w") as f:
		f.write('<html>\n'
			'<head>\n'
			'<meta charset="UTF-8">\n'
			'<title>OSARA: Open Source Accessibility for the REAPER Application</title>\n'
			'</head>\n'
			'<body>\n')
		f.write(bodyHtml)
		f.write('\n</body>\n</html>\n')

def main():
	data = json.loads(sys.stdin.readline())
	data["date"] = datetime.datetime.utcnow().ctime()
	buildOs = data["os"]
	if not buildOs.isalpha():
		raise ValueError
	print("Publishing %s snapshot %s" % (buildOs, data["version"]))
	json.dump(data,
		open(os.path.join(SNAPSHOT_INDEX_DIR, buildOs), "w"))
	if buildOs == "win":
		winData = data
		macData = getData("mac")
	else:
		macData = data
		winData = getData("win")

	writeSnapshotIndex(winData, macData)
	if buildOs == "win":
		writeUpdateData(winData)
		updateReadme()

if __name__ == "__main__":
	main()
